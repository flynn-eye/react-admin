{"version":3,"sources":["components/charts/worldMap/index.tsx","pages/map/index.tsx"],"names":["joinData","geodata","ncovData","ncovDataObj","forEach","item","countryName","countryEnglishName","currentConfirmedCount","confirmedCount","suspectedCount","curedCount","deadCount","geoObj","features","feature","name","properties","ncov","WorldMap","React","memo","useState","data","setData","useEffect","a","Promise","all","fetch","then","d","json","geoData","results","fetchData","map","dragPan","pitch","style","zoom","maxZoom","minZoom","width","scrollZoom","position","background","top","left","right","bottom","key","options","autoFit","source","scale","values","type","active","option","color","field","reverse","shape","opacity","size","Map"],"mappings":"qNAGA,SAASA,EAASC,EAAcC,GAC9B,IAAMC,EAAmB,GACzBD,EAASE,SAAQ,SAACC,GAAe,IAE7BC,EAOED,EAPFC,YACAC,EAMEF,EANFE,mBACAC,EAKEH,EALFG,sBACAC,EAIEJ,EAJFI,eACAC,EAGEL,EAHFK,eACAC,EAEEN,EAFFM,WACAC,EACEP,EADFO,UAEkB,iBAAhBN,EACGH,EAAYG,IAWfH,EAAYG,GAAaE,uBAAyBA,EAClDL,EAAYG,GAAaG,gBAAkBA,EAC3CN,EAAYG,GAAaI,gBAAkBA,EAC3CP,EAAYG,GAAaK,YAAcA,EACvCR,EAAYG,GAAaM,WAAaA,GAdtCT,EAAYG,GAAe,CACzBA,YAAa,EACbC,qBACAC,sBAAuB,EACvBC,eAAgB,EAChBC,eAAgB,EAChBC,WAAY,EACZC,UAAW,GAUfT,EAAYG,GAAe,CACzBA,cACAC,qBACAC,wBACAC,iBACAC,iBACAC,aACAC,gBAIN,IAAMC,EAAc,GAUpB,OATAZ,EAAQa,SAASV,SAAQ,SAACW,GAAkB,IAClCC,EAASD,EAAQE,WAAjBD,KACRH,EAAOG,GAAQD,EAAQE,WACvB,IAAMC,EAAOf,EAAYa,IAAS,GAClCD,EAAQE,WAAR,2BACKF,EAAQE,YACRC,MAGAjB,EAGT,IA8FekB,EA9FEC,IAAMC,MAAK,WAAgB,IAAD,EACjBD,IAAME,WADW,mBAClCC,EADkC,KAC5BC,EAD4B,KAiBzC,OAfAJ,IAAMK,WAAU,YACC,uCAAG,kCAAAC,EAAA,sEACkBC,QAAQC,IAAI,CAC5CC,MACE,sFACAC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UAEhBH,MACE,sFACAC,MAAK,SAACC,GAAD,OAAOA,EAAEC,YARF,mCACTC,EADS,KACA/B,EADA,KAUhBsB,EAAQxB,EAASiC,EAAS/B,EAASgC,UAVnB,2CAAH,qDAYfC,KACC,IAED,oCACE,kBAAC,IAAD,CACEC,IAAK,CACHC,SAAS,EACTC,MAAO,EACPC,MAAO,QACPC,KAAM,EACNC,QAAS,EACTC,QAAS,EACTC,MAAO,IACPC,YAAY,GAEdL,MAAO,CACLM,SAAU,WACVC,WAAY,OACZC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,IAGT3B,GAAQ,CACP,kBAAC,IAAD,CACE4B,IAAK,IACLC,QAAS,CACPC,SAAS,GAEXC,OAAQ,CACN/B,QAEFgC,MAAO,CACLC,OAAQ,CACN/C,eAAgB,CACdgD,KAAM,cAIZC,OAAQ,CACNC,OAAQ,CACNC,MAAO,YAGXA,MAAO,CACLC,MAAO,iBACPL,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAAWM,WAE7EC,MAAO,CACLP,OAAQ,QAEVjB,MAAO,CACLyB,QAAS,KAGb,kBAAC,IAAD,CACEb,IAAK,IACLG,OAAQ,CACN/B,QAEF0C,KAAM,CACJT,OAAQ,IAEVI,MAAO,CACLJ,OAAQ,QAEVO,MAAO,CACLP,OAAQ,QAEVjB,MAAO,CACLyB,QAAS,WCvIRE,UAPC,WACd,OACE,oCACE,kBAAC,EAAD","file":"static/js/15.88c8750c.chunk.js","sourcesContent":["import React from 'react';\nimport { LineLayer, MapboxScene, Marker, PolygonLayer, Popup } from '@antv/l7-react';\n\nfunction joinData(geodata: any, ncovData: any) {\n  const ncovDataObj: any = {};\n  ncovData.forEach((item: any) => {\n    const {\n      countryName,\n      countryEnglishName,\n      currentConfirmedCount,\n      confirmedCount,\n      suspectedCount,\n      curedCount,\n      deadCount\n    } = item;\n    if (countryName === '中国') {\n      if (!ncovDataObj[countryName]) {\n        ncovDataObj[countryName] = {\n          countryName: 0,\n          countryEnglishName,\n          currentConfirmedCount: 0,\n          confirmedCount: 0,\n          suspectedCount: 0,\n          curedCount: 0,\n          deadCount: 0\n        };\n      } else {\n        ncovDataObj[countryName].currentConfirmedCount += currentConfirmedCount;\n        ncovDataObj[countryName].confirmedCount += confirmedCount;\n        ncovDataObj[countryName].suspectedCount += suspectedCount;\n        ncovDataObj[countryName].curedCount += curedCount;\n        ncovDataObj[countryName].deadCount += deadCount;\n      }\n    } else {\n      ncovDataObj[countryName] = {\n        countryName,\n        countryEnglishName,\n        currentConfirmedCount,\n        confirmedCount,\n        suspectedCount,\n        curedCount,\n        deadCount\n      };\n    }\n  });\n  const geoObj: any = {};\n  geodata.features.forEach((feature: any) => {\n    const { name } = feature.properties;\n    geoObj[name] = feature.properties;\n    const ncov = ncovDataObj[name] || {};\n    feature.properties = {\n      ...feature.properties,\n      ...ncov\n    };\n  });\n  return geodata;\n}\n\nconst WorldMap = React.memo(function Map() {\n  const [data, setData] = React.useState();\n  React.useEffect(() => {\n    const fetchData = async () => {\n      const [geoData, ncovData] = await Promise.all([\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/e62a2f3b-ea99-4c98-9314-01d7c886263d.json'\n        ).then((d) => d.json()),\n        // https://lab.isaaclin.cn/nCoV/api/area?latest=1\n        fetch(\n          'https://gw.alipayobjects.com/os/bmw-prod/55a7dd2e-3fb4-4442-8899-900bb03ee67a.json'\n        ).then((d) => d.json())\n      ]);\n      setData(joinData(geoData, ncovData.results));\n    };\n    fetchData();\n  }, []);\n  return (\n    <>\n      <MapboxScene\n        map={{\n          dragPan: false,\n          pitch: 0,\n          style: 'blank',\n          zoom: 0,\n          maxZoom: 0,\n          minZoom: 0,\n          width: 800,\n          scrollZoom: false\n        }}\n        style={{\n          position: 'absolute',\n          background: '#fff', // 地图背景色\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0\n        }}\n      >\n        {data && [\n          <PolygonLayer\n            key={'1'}\n            options={{\n              autoFit: true\n            }}\n            source={{\n              data\n            }}\n            scale={{\n              values: {\n                confirmedCount: {\n                  type: 'quantile'\n                }\n              }\n            }}\n            active={{\n              option: {\n                color: '#0c2c84'\n              }\n            }}\n            color={{\n              field: 'confirmedCount', // 填充颜色\n              values: ['#409EFF', '#67B1FF', '#8CC4FF', '#A0CFFF', '#B2D8FE', '#ECF6FF'].reverse()\n            }}\n            shape={{\n              values: 'fill'\n            }}\n            style={{\n              opacity: 1\n            }}\n          />,\n          <LineLayer\n            key={'2'}\n            source={{\n              data\n            }}\n            size={{\n              values: 0.6\n            }}\n            color={{\n              values: '#aaa' // 描边颜色\n            }}\n            shape={{\n              values: 'line'\n            }}\n            style={{\n              opacity: 1\n            }}\n          />\n        ]}\n      </MapboxScene>\n    </>\n  );\n});\nexport default WorldMap;\n","import React, { FC } from 'react';\nimport WorldMap from '../../components/charts/worldMap';\nconst Map: FC = () => {\n  return (\n    <>\n      <WorldMap />\n    </>\n  );\n};\nexport default Map;\n"],"sourceRoot":""}